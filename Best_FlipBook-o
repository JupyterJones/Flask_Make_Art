#!/home/jack/miniconda3/envs/cloned_base/bin/python
import os
import subprocess
from PIL import Image
import glob
import random
import imageio
import numpy as np
import shutil
import uuid
import logging
from sys import argv
from moviepy.video.compositing.transitions import slide_in
from moviepy.video.fx import all
from moviepy.editor import *

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Get the image directory from command-line arguments
image_directory = 'static/archived-store'

# Set the output directory for generated videos
output_directory = os.path.join(image_directory, "output_videos/")
logging.info("image_directory: %s", image_directory)
logging.info("output_directory: %s", output_directory)

# Create the output directory if it doesn't exist
os.makedirs(output_directory, exist_ok=True)

# Get the list of images in the directory and shuffle them
image_list = sorted(glob.glob(os.path.join(image_directory, '*.png')))
random.shuffle(image_list)
logging.info("Number of images: %d", len(image_list))

# Initialize a list to store the paths of generated videos
video_paths = []

# Iterate through consecutive pairs of images
for i in range(len(image_list) - 1):
    try:
        base_image_path = image_list[i]
        image_to_paste_path = image_list[(i - 1) % len(image_list)]  # Ensure a valid index
        logging.info("base_image_path: %s", base_image_path)
        logging.info("image_to_paste_path: %s", image_to_paste_path)

        # Open the base image
        base_image = Image.open(base_image_path).convert("RGBA")
        bs = base_image.size
        logging.info("Base image size: %s", bs)

        # Create a list to store individual frames
        IMG_SRC = []

        # Open each image to paste and create frames
        for j in range(0, bs[0], 5):
            current_frame = base_image.copy()
            image_to_paste = Image.open(image_to_paste_path).convert("RGBA")
            logging.info("Image to paste size: %s", image_to_paste.size)
            image_to_paste = image_to_paste.resize((bs[0] - j, bs[1]), Image.BICUBIC)

            # Determine the position where you want to paste the smaller image on the larger image
            x = 0
            y = 0
            paste_position = (x, y)

            # Ensure that the smaller image is not larger than the base image
            if image_to_paste.size[0] + paste_position[0] <= base_image.size[0] and \
                    image_to_paste.size[1] + paste_position[1] <= base_image.size[1]:
                # Paste the smaller image onto the larger image
                current_frame.paste(image_to_paste, paste_position, image_to_paste)

                # Append the current frame to the list
                IMG_SRC.append(np.array(current_frame))

        # Save the frames as an MP4 video using imageio
        output_video_path = os.path.join(output_directory, f'output_video_{i}.mp4')
        logging.info("output_video_path: %s", output_video_path)
        imageio.mimsave(output_video_path, IMG_SRC, fps=30)
        video_paths.append(output_video_path)
    except Exception as e:
        logging.error("Error processing images: %s", e)

# Prepare for concatenation of all generated videos
input_list_path = os.path.join(output_directory, "input_list.txt")
with open(input_list_path, 'w') as input_list_file:
    for video_path in video_paths:
        input_list_file.write(f"file '{os.path.abspath(video_path)}'\n")

# Concatenate videos using ffmpeg
concatenated_video_path = os.path.join(output_directory, "final_result.mp4")
ffmpeg_command = f"ffmpeg -y -f concat -safe 0 -i {input_list_path} -c copy -y {concatenated_video_path}"
subprocess.run(ffmpeg_command, shell=True, check=True)

# Check if concatenation was successful
if not os.path.exists(concatenated_video_path):
    logging.error("Concatenation failed: %s not found", concatenated_video_path)
    sys.exit(1)

# Use uuid to create a unique name for the output video and copy it to the final directory
final_output_directory = "/home/jack/Desktop/HDD500/collections/vids/"
os.makedirs(final_output_directory, exist_ok=True)
final_output_video_path = os.path.join(final_output_directory, str(uuid.uuid4()) + ".mp4")
shutil.copyfile(concatenated_video_path, final_output_video_path)

logging.info("Final video saved to %s", final_output_video_path)

def add_title_image(video_path, hex_color="#A52A2A"):
    hex_color = random.choice(["#A52A2A", "#ad1f1f", "#16765c", "#7a4111", "#9b1050", "#8e215d", "#2656ca"])
    directory_path = "static/temp"
    if not os.path.exists(directory_path):
        os.makedirs(directory_path)
        logging.info(f"Directory '{directory_path}' created.")
    else:
        logging.info(f"Directory '{directory_path}' already exists.") 
    video_clip = VideoFileClip(video_path)
    width, height = video_clip.size
    get_duration = video_clip.duration
    logging.info(f"Video duration: {get_duration}, width: {width}, height: {height}")
    title_image_path = "/mnt/HDD500/collections/assets/flipbook_title.png"
    padded_size = (width + 50, height + 50)
    x_position = (padded_size[0] - video_clip.size[0]) / 2
    y_position = (padded_size[1] - video_clip.size[1]) / 2
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)
    rgb_tuple = (r, g, b)
    blue_background = ColorClip(padded_size, color=rgb_tuple)
    padded_video_clip = CompositeVideoClip([blue_background, video_clip.set_position((x_position, y_position))])
    padded_video_clip = padded_video_clip.set_duration(video_clip.duration)
    title_image = ImageClip(title_image_path).set_duration(video_clip.duration).set_position((0, -5)).resize(padded_video_clip.size)
    composite_clip = CompositeVideoClip([padded_video_clip, title_image]).set_duration(video_clip.duration)
    mp3_files = glob.glob("/mnt/HDD500/collections/music_long/*.mp3")
    random.shuffle(mp3_files)
    mp_music = random.choice(mp3_files)
    music_clip = AudioFileClip(mp_music)
    music_duration = music_clip.duration
    start_time = random.uniform(20, 40)
    if start_time + video_clip.duration > music_duration:
        start_time = max(0, music_duration - video_clip.duration)
    music_clip = music_clip.subclip(start_time, start_time + video_clip.duration).set_duration(video_clip.duration)
    fade_duration = 1.0
    music_clip = music_clip.audio_fadein(fade_duration).audio_fadeout(fade_duration)
    composite_clip = composite_clip.set_audio(music_clip)
    uid = uuid.uuid4().hex
    output_path = f'static/temp_exp/final_flipbook.mp4'
    composite_clip.write_videofile(output_path)
    mp4_file = f"/mnt/HDD500/collections/vids/AI_Creates_a_Flipbook_of_Processed_AI_Generated_Images_ID{uid}.mp4"
    shutil.copyfile(output_path, mp4_file)
    logging.info(mp4_file)
    return output_path

# Add border and title image to the concatenated video
add_title_image(final_output_video_path)
